/*
** lmcoint.src was written by Joakim Westerlund, Department of Economics, Lund University.
** Contact info:  joakim.westerlund@nek.lu.se
**
** The code can be used freely as long as proper reference is given. No performance
** guarantee is made. Bug reports are welcome.
*/

proc (1) = ilt(y, x, br, pmax, mod);
    local k,d,b,u,za,zt,t,dy,dx,tr,v,z,dz,s,s0,sl,ds,v0,vl,p;
    
    t = rows(y);
    
    if mod == 0;
        z  = seqa(1,1,t);
        dz = ones(t-1,1);
    elseif mod == 1;
        if br == 0;
            z  = seqa(1,1,t);
            dz = ones(t-1,1);
        else;
            z  = seqa(1,1,t)~(zeros(br,1)|ones(t-br,1));
            dz = diff_west(z,1);
        endif;
    elseif mod == 2;
        if br == 0;
            z  = seqa(1,1,t);
            dz = ones(t-1,1);
        else;
            d  = (zeros(br,1)|ones(t-br,1));
            z  = seqa(1,1,t)~d~(d.*x);
            dz = diff_west(z,1);
        endif;
    endif;
    
    dx = (diff_west(x,1)~dz);
    dy = diff_west(y,1);
    d  = inv(dx'dx)*(dx'dy);
    b  = y[1] - (x[1,.]~z[1,.])*d;
    s0 = y - b - (x~z)*d;
    sl = s0[1:t-1,.];
    ds = s0[2:t,.] - sl;
    
    p  = campbell(s0,pmax);
    v  = (ones(t-p-2,1)~lagp(ds,p));
    ds = (eye(t-p-2)-v*inv(v'v)*v')*ds[p+2:t-1];
    sl = (eye(t-p-2)-v*inv(v'v)*v')*sl[p+2:t-1];
    d  = inv(sl'sl)*(sl'ds);
    u  = ds - sl*d;
    v0 = lrvar(u,0);
    vl = lrvar(ds,p);
    zt = d/sqrt(v0*inv(sl'sl));
    za = (t*d)*sqrt(vl/v0);
    
    retp(zt~za);
endp;

proc (1) = campbell(x,pmax);
    local i,j,p,xl,z,b,dx,u,s,tr,out,t;
    
    t = rows(x);
    
    p = pmax;
    do while p >= 1;
        
        xl = x[p+1:t-1];
        dx = x[p+2:t] - xl;
        z  = ones(t-p-1,1)~xl~lagp((x[1:t-1]-x[2:t]),p-1);
        b  = inv(z'z)*(z'dx);
        u  = dx - z*b;
        s  = (u'u)/(t-p-2);
        s  = sqrt(diag(s*inv(z'z)));
        tr = abs(b[rows(b),1]/s[rows(s),1]);
        
        if tr > 1.96;
            j = p-1;
            goto out;
        endif;
        
        p = p - 1;
    endo;
    
    out:
        
        retp(j);
endp;




proc (1) = ilt_ssr(y,x,br,pmax,mod);
    local d,u,t,dy,dx,z,dz,b,s0,sl,ds,v,p;
    
    t = rows(y);
    
    if mod == 0;
        z  = seqa(1,1,t);
        dz = ones(t-1,1);
    elseif mod == 1;
        if br == 0;
            z  = seqa(1,1,t);
            dz = ones(t-1,1);
        else;
            z  = seqa(1,1,t)~(zeros(br,1)|ones(t-br,1));
            dz = diff_west(z,1);
        endif;
    elseif mod == 2;
        if br == 0;
            z  = seqa(1,1,t);
            dz = ones(t-1,1);
        else;
            d  = (zeros(br,1)|ones(t-br,1));
            z  = seqa(1,1,t)~d~(d.*x);
            dz = diff_west(z,1);
        endif;
    endif;
    
    dx = (diff_west(x,1)~dz);
    dy = diff_west(y,1);
    d  = inv(dx'dx)*(dx'dy);
    b  = y[1] - (x[1,.]~z[1,.])*d;
    s0 = y - b - (x~z)*d;
    sl = s0[1:t-1,.];
    ds = s0[2:t,.] - sl;
    
    p  = campbell(s0,pmax);
    v  = (ones(t-p-2,1)~lagp(ds,p));
    ds = (eye(t-p-2)-v*inv(v'v)*v')*ds[p+2:t-1];
    sl = (eye(t-p-2)-v*inv(v'v)*v')*sl[p+2:t-1];
    d  = inv(sl'sl)*(sl'ds);
    u  = ds - sl*d;
    
    retp(u'u);
endp;


proc (1) = lagp(x,p);
    local t,i,xl;
    
    t = rows(x);
    
    i  = 1;
    xl = lagn(x,1);
    do while i <= p;
        i  = i + 1;
        xl = (xl~lagn(x,i));
    endo;
    
    retp(trimr(xl,p+1,0));
endp;



proc lrvar(u,k);
    local sl,s0;
    
    sl = fejer(u,k);
    s0 = (u'u)/rows(u);
    
    retp((s0 + sl + sl'));
endp;



proc fejer(u,k);
    local i,w,s,u0,ul;
    
    if k == 0;
        s = 0;
        goto out;
    endif;
    
    i = 1;
    s = 0;
    do until i > k;
        w  = 1 - i/(k+1);
        u0 = trimr(u,i,0);
        ul = trimr(lagn(u,i),i,0);
        s  = s + w*(u0'ul);
        i  = i + 1;
    endo;
    
    out:
        
        retp(s/rows(u));
endp;


proc diff_west(x, k);
    if k == 0;
        retp(x) ;
    endif ;
    retp(trimr(x,k,0)-trimr(lagn(x,k),k,0));
endp;


proc (1) = minpr(x);
    local d,m,i,minx;
    
    i = 1;
    m = 1;
    d = x[1];
    do while i <= rows(x);
        if x[i] < d;
            d = x[i];
        endif;
        i = i+1;
    endo;
    
    i = 2;
    do while i <= rows(x);
        if d == x[i];
            m = i;
            goto stops;
        endif;
        i = i + 1;
    endo;
    
    stops:
        
        retp(m);
endp;

proc(2) = lm_break(y, x, k, mod);
    local t, t1, t2, j, ssr, br, lm;
    
    t = rows(y);
    
    t1  = round(tr*t);
    t2  = round((1-tr)*t);
    j   = t1;
    ssr = zeros(t, 1);
    do while j <= t2;
        ssr[j] = ilt_ssr(y,x,j,k,mod);
        j      = j + 1;
    endo;
    
    br = minpr(ssr[t1:t2]) + t1 - 1;
    lm = ilt(y,x,br,k,mod);
    
    /* printing options */
    format/m1/rd 8,3;
    
    print " ";
    print " t   = ";;
    lm[1];
    print " phi = ";;
    lm[2];
    print " ";
    print " estimated breakpoint = ";;
    br;
    print " ";
    
    retp(lm, br);
endp;

